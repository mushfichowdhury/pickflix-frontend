{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mushfichowdhury/Flatiron/code/Projects/Mod4-PickFlix/pickflix-frontend/src/Pick Page/TinderCards.js\";\nimport React from 'react';\nimport TinderCard from 'react-tinder-card';\nimport \"./TinderCards.css\";\nimport GenreFilter from './GenreFilter';\nimport { withAlert } from 'react-alert';\nimport _ from 'underscore'; // import { Console } from 'console';\n\nclass TinderCards extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movies: [],\n      likedMovies: []\n    };\n\n    this.componentDidMount = () => {\n      fetch(\"https://pick-flix.herokuapp.com/movies\").then(resp => resp.json()).then(moviesArray => {\n        this.setState({\n          movies: moviesArray\n        });\n      });\n      fetch(\"https://pick-flix.herokuapp.com/liked_movies\").then(resp => resp.json()).then(data => {\n        this.setState({\n          likedMovies: data\n        });\n      });\n    };\n\n    this.addLikedMovie = movie => {\n      let likedMovieObj = {\n        user_id: this.props.currentUser.id,\n        movie_id: movie.id\n      };\n\n      if (this.state.likedMovies.filter(obj => {\n        return obj.user.id === this.props.currentUser.id;\n      }).map(obj => obj.movie.netflixid).includes(movie.netflixid)) {\n        console.log(\"Did not add\"); // this.alert.show(\"You've already picked this flix!\")\n\n        alert(\"You've already picked this flix!\");\n      } else {\n        console.log(\"adding movie\");\n        fetch(\"https://pick-flix.herokuapp.com/liked_movies\", {\n          method: \"POST\",\n          headers: {\n            'Content-Type': \"application/json\",\n            Accepts: 'application/json'\n          },\n          body: JSON.stringify(likedMovieObj)\n        }).then(response => response.json()).then(data => {\n          this.setState(prevState => ({\n            likedMovies: [...prevState.likedMovies, data]\n          }));\n          this.checkIfMovieMatched(data);\n        });\n      }\n    };\n\n    this.checkIfMovieMatched = data => {\n      if (this.state.likedMovies.filter(obj => {\n        return obj.user.id !== data.user.id;\n      }).map(obj => obj.movie.netflixid).includes(data.movie.netflixid)) {\n        alert(\"You've got a match!\");\n      } else {\n        console.log(\"movie did not match\");\n      }\n    };\n\n    this.swipeHandler = (dir, movie) => {\n      if (dir === 'right') {\n        this.setState(prevState => ({\n          likedArray: [...prevState.likedArray, movie],\n          lastDirection: dir\n        }));\n        console.log(movie);\n        this.addLikedMovie(movie);\n      } else {\n        movie.priority -= 1;\n        this.setState({\n          lastDirection: dir\n        });\n      }\n    };\n  }\n\n  // BELOW IS THE FRANKENSTEIN VERSION WE WILL COME BACK TO LATER\n  // setRandomGenreIds = () => {\n  //     let allGenreIds = [10673, 10702, 11804, 11828, 1192487, 1365, 1568, 2125, 2653, 43040, 43048, 4344, 46576, 75418, 76501, 77232, 788212, 801362, 852490, 899, 9584, 10695, 11146, 2653, 2729, 3063, 413820, 452, 6721, 7424, 9302, 10056, 27480, 27950, 28034, 28083, 28233, 48586, 5455, 561, 6218, 6796, 6962, 78120, 783, 89513, 10032, 11093, 13158, 29809, 2994, 31273, 31574, 31694, 32392, 46553, 46560, 46576, 46588, 47147, 47465, 48303, 48586, 48744, 76186, 1009, 10256, 10375, 105, 10778, 11559, 11755, 1208951, 1333288, 1402, 1747, 17648, 2030, 2700, 31694, 3300, 34157, 3519, 3996, 4058, 4195, 43040, 4426, 4906, 52104, 52140, 52847, 5286, 5475, 5610, 56174, 58905, 59169, 61132, 61330, 6197, 63092, 63115, 6548, 711366, 7120, 72407, 7539, 77599, 77907, 78163, 78655, 79871, 7992, 852492, 869, 89585, 9302, 9434, 9702, 9736, 10944, 3675, 4734, 74652, 7627, 9434, 10005, 10105, 10599, 1159, 15456, 180, 2595, 26126, 2760, 28269, 3652, 3675, 4006, 4720, 48768, 49110, 49547, 50232, 5161, 5349, 55087, 56178, 58710, 60026, 6839, 7018, 72384, 77245, 852494, 90361, 9875, 11, 11075, 11714, 1208954, 1255, 12994, 13158, 2150, 25955, 26009, 2696, 2748, 2757, 2893, 29809, 3179, 31901, 34204, 3653, 3682, 384, 3916, 3947, 4282, 4425, 452, 4961, 500, 5012, 52148, 52904, 56169, 5763, 58677, 58755, 58796, 59064, 6206, 62235, 6616, 6763, 68699, 6889, 711367, 71591, 72354, 7243, 7539, 75459, 76507, 78628, 852493, 89804, 9299, 9847, 9873, 26835, 52804, 751423, 3329, 4720, 500, 5977, 65263, 7120, 10695, 10944, 1694, 42023, 45028, 48303, 61546, 75405, 75804, 75930, 8195, 83059, 8711, 89585, 11804, 3269, 384, 4195, 56184, 69192, 7077, 875, 9916, 1192487, 1195213, 1208951, 1208954, 1218090, 78367, 852488, 852490, 852491, 852492, 852493, 852494, 10032, 10741, 1701, 2222, 2856, 5096, 52843, 6031, 13335, 13573, 32392, 52852, 55774, 59433, 84488, 88635, 29281, 36103, 502675, 108533, 11014, 1372, 1492, 1568, 1694, 2595, 2729, 3327, 3916, 47147, 4734, 49110, 50232, 52780, 52849, 5903, 6000, 6926, 852491, 180, 25788, 4370, 5286, 7243, 9327, 10306, 10499, 10504, 10719, 11014, 11140, 1138506, 1321, 1774, 3269, 43048, 46588, 5505, 58798, 65558, 6867, 75390, 78507, 799, 852488, 8933, 89811, 9147, 972, 12739, 51063, 801362, 1365, 43040, 1568, 43048, 11881, 7442, 3761, 6031, 4906, 9847, 10778, 5661, 3327, 760, 5507, 50462, 7424, 2653, 9302, 452, 11146, 3063, 10695, 2729, 1433679, 6721, 5923, 6133, 69616, 29764, 77232, 78104, 2030, 3936, 11075, 5230, 10719, 52387, 89804, 89844, 8195, 69946, 12339, 12762, 262, 846815, 3652, 3179, 90139, 77907, 5480, 12443, 17648, 28269, 4425, 798, 84488, 84489, 69624, 1009, 6051, 3682, 52508, 10757, 12433, 1774, 52140, 52148, 52120, 52117, 52104, 1252, 56174, 56178, 56169, 56181, 63151, 56184, 58704, 846810, 702387, 846807, 783, 3960, 46576, 46560, 48586, 31694, 2994, 29809, 32473, 48303, 31574, 32392, 11093, 31273, 47147, 46588, 46553, 48744, 47465, 10032, 69636, 6548, 78163, 53717, 10118, 49266, 7129, 1105, 528582748, 25955, 6895, 788212, 9584, 4058, 9875, 6889, 5824, 10185, 10499, 26126, 26009, 26146, 37938, 899, 9736, 6206, 3979, 875, 5903, 9434, 10944, 7627, 4734, 74652, 8451, 5080, 59169, 60339, 60026, 59064, 58700, 77951, 869, 45028, 3493, 67673, 59433, 6839, 5763, 4961, 13158, 12994, 3653, 89513, 79871, 9873, 89441, 10606, 89442, 5254, 10659, 52858, 89708, 11079, 26835, 52804, 52855, 58879, 52847, 31901, 51058, 51056, 52849, 9744, 77599, 7687, 62285, 78503, 72436, 3890, 12803, 11828, 4426, 5161, 2150, 8243, 8654, 7462, 6485, 10306, 58905, 58710, 58677, 58807, 58798, 31851, 7120, 4720, 500, 5977, 65263, 63115, 58755, 58886, 65198, 82489, 867737, 5096, 61115, 108663, 108663, 9793, 27018, 5349, 71591, 107985, 393181, 89585, 8711, 11804, 4195, 384, 7077, 3269, 9942, 5051, 10463, 2222, 852490, 852492, 852494, 852493, 1218090, 78367, 852491, 852488, 1192487, 1208951, 1208954, 1195213, 48785, 58750, 3300, 4282, 8221, 6867, 1293326, 4344, 1747, 2893, 10750, 65925, 10398, 1402191, 6000, 799, 711366, 711367, 64256, 1461923, 64256, 1138506, 10271, 413820, 751423, 52843, 28233, 27950, 27480, 28034, 28083, 27346, 8248, 6626, 1989, 5685, 11283, 68699, 67879, 1402, 3996, 15456, 6763, 1613, 88635, 75408, 67708, 10741, 34157, 1333288, 8985, 6695, 34204, 105, 2757, 7825, 67644, 5875, 76501, 77245, 76507, 76510, 2125, 4006, 11, 25804, 4814, 26, 9090, 76186, 947, 10056, 6796, 6962, 6218, 5455, 561, 1701, 90361, 52852, 84483, 13335, 9994, 48768, 49547, 10365, 63782, 1138254, 78120, 78655, 78208, 78628, 78321, 78634, 61132, 78463, 62235, 62510, 78507, 78373, 12123, 75418, 79049, 75459, 75436, 75415, 75390, 75392, 2700, 7018, 6616, 10504, 55087, 2145, 5505, 8721, 36103, 6073, 9833, 3081, 10005, 1408777, 3278, 4649, 5475, 61656, 1255, 502675, 3830, 7153, 3329, 9916, 17241, 17241, 1458609, 8883, 3830, 78250, 60829, 26156, 26052, 11567, 6998, 4922, 11755, 1884, 10599, 2696, 69192, 9292, 1321, 76802, 108533, 1492, 6926, 3916, 1694, 11014, 2595, 52780, 49110, 50232, 9702, 5012, 13573, 53310, 5608, 3903, 10256, 8646, 1519826, 12549, 3215, 3675, 3947, 9196, 61330, 58796, 61546, 61546, 58741, 65558, 67675, 6814, 2760, 9327, 5286, 180, 7243, 4370, 25788, 10702, 9147, 55774, 11559, 29281, 35800, 972, 42023, 11140, 63092, 63975, 62016, 76793, 1516534, 6384, 3519, 9299, 53915, 52147, 60951, 10832, 8933, 1159, 48762, 10673, 7992, 11177, 10375, 7539, 10105, 11714, 83059, 4366, 1372, 83, 5610, 10634, 26105, 52904, 89811, 11522, 9472, 1159493, 75445, 72407, 72384, 72354, 72404, 75432, 75804, 5342, 1800, 6197, 75930, 7700, 1458, 2856, 70023, 75405, 711367, 64256, 2893]\n  //     let sampleGenreIds = _.sample(allGenreIds, 10)\n  //     let genreIdString = sampleGenreIds.join()\n  //     return genreIdString\n  // }\n  // componentDidMount = () => {\n  //     let genreIdString = this.setRandomGenreIds()\n  //     fetch(\"https://unogs-unogs-v1.p.rapidapi.com/api.cgi?t=genres\", {\n  //         \"method\": \"GET\",\n  //         \"headers\": {\n  //             \"x-rapidapi-key\": \"8afd7ffa98msh66c5e14a405f912p133da5jsne6eb4d751d16\",\n  //             \"x-rapidapi-host\": \"unogs-unogs-v1.p.rapidapi.com\"\n  //         }\n  //     })\n  //         .then(response => response.json())\n  //         .then(data => this.setState({genreIdsWithNamesArray: data[\"ITEMS\"]}))\n  //         .catch(err => {\n  //             console.error(err);\n  //         });\n  //     fetch(`https://rapidapi.p.rapidapi.com/aaapi.cgi?q=%7Bquery%7D-!1900%2C2018-!0%2C5-!0%2C10-!${genreIdString}-!Any-!Any-!Any-!gt100-!%7Bdownloadable%7D&t=ns&cl=all&st=adv&ob=Relevance&p=1&sa=and`, {\n  //         \"method\": \"GET\",\n  //         \"headers\": {\n  //             \"x-rapidapi-key\": \"8afd7ffa98msh66c5e14a405f912p133da5jsne6eb4d751d16\",\n  //             \"x-rapidapi-host\": \"unogs-unogs-v1.p.rapidapi.com\"\n  //         }\n  //     })\n  //         .then(resp => resp.json())\n  //         .then(moviesArr => {\n  //             this.setState({ movies: moviesArr[\"ITEMS\"] })\n  //             this.createMovieObjects(this.state.movies)\n  //         })\n  //     fetch(\"http://localhost:3000/liked_movies\")\n  //         .then(resp => resp.json())\n  //         .then((data) => this.setState({ likedMovies: data }))\n  // }\n  // createMovieObjects = (moviesArr) => {\n  //     let apiKey = \"91b02583\"\n  //     let newArray = moviesArr.map(movie => {\n  //         this.omdbRequest(movie, apiKey)         \n  //     })\n  // }\n  // omdbRequest = (movie, apiKey) => {\n  //     console.log(\"movie from omdb request\", movie)\n  //     fetch(`http://omdbapi.com/?i=${movie[\"imdbid\"]}&apikey=${apiKey}&plot=full`)\n  //         .then(r=>r.json())\n  //         .then(data => {\n  //             console.log(\"line 80\", data)\n  //             this.setState({ omdbData: data})\n  //             movie = {\n  //                 \"netflixid\": movie[\"netflixid\"],\n  //                 \"title\": movie[\"title\"],\n  //                 \"image\": movie[\"image\"],\n  //                 \"rating\": movie[\"rating\"],\n  //                 \"media\": movie[\"type\"],\n  //                 \"runtime\": movie[\"runtime\"],\n  //                 \"largeimage\": movie[\"largeimage\"],\n  //                 \"imdbid\": movie[\"imdbid\"],\n  //                 \"priority\": 10,\n  //                 \"genre\": data[\"Genre\"],\n  //                 \"year\": data[\"Year\"],\n  //                 \"released\": data[\"Released\"],\n  //                 \"rated\": data[\"Rated\"],\n  //                 \"director\": data[\"Director\"],\n  //                 \"writer\": data[\"Writer\"],\n  //                 \"actors\": data[\"Actors\"],\n  //                 \"plot\": data[\"Plot\"],\n  //                 \"language\": data[\"Language\"],\n  //                 \"country\": data[\"Country\"],\n  //                 \"awards\": data[\"Awards\"],\n  //                 \"poster\": data[\"Poster\"],\n  //                 \"imdbRating\": data[\"imdbRating\"],\n  //                 \"imdbVotes\": data[\"imdbVotes\"]\n  //             }\n  //             this.setState((prevState) => ({frankensteinMoviesArray: [...prevState.frankensteinMoviesArray, movie]}) )  \n  //             })\n  //             console.log(\"frankenarray\", this.state.frankensteinMoviesArray)\n  //         }\n  // swipeHandler = (dir, movie) => {\n  //     if(dir === 'right') {\n  //         this.setState((prevState) => ({\n  //             likedArray: [...prevState.likedArray, movie],\n  //             lastDirection: dir\n  //         }))\n  //         this.addMovieToDatabase(movie)\n  //         console.log(movie)\n  //     }\n  //     else {\n  //         movie.priority -= 1\n  //         this.setState({ lastDirection: dir})\n  //     }\n  // }\n  // addMovieToDatabase = (movie) => {\n  //     console.log(\"swiped movie\", movie)\n  //     fetch(\"http://localhost:3000/movies\", {\n  //         method: \"POST\",\n  //         headers: {\n  //             \"content-type\": \"application/json\",\n  //             \"accept\": \"application/json\"\n  //         },\n  //         body: JSON.stringify(movie)\n  //     })\n  //         .then(r=>r.json())\n  //         .then(data => {\n  //             console.log(\"new movie data\", data)\n  //             this.setState({\n  //                 addedMovieObj: data,\n  //                 isMovieAdded: true\n  //             })\n  //         }\n  //         )\n  //     _.delay(this.addLikedMovie, 1000)\n  // }\n  // addLikedMovie = () => {\n  //         let likedMovieObj = {\n  //             user_id: this.props.currentUser.id,\n  //             movie_id: this.state.addedMovieObj.id\n  //         }\n  //         console.log(\"liked movie object 103\", likedMovieObj)\n  //         if (this.state.likedMovies.filter((obj) => { return obj.user.id === 1 }).map(obj => obj.movie.netflixid).includes(this.state.addedMovieObj.netflixid)) {\n  //             console.log(\"Did not add\")\n  //             alert(\"You've already picked this flix!\")\n  //         }\n  //         else {\n  //             console.log(\"adding movie\")\n  //             fetch(\"http://localhost:3000/liked_movies\", {\n  //                 method: \"POST\",\n  //                 headers: {\n  //                     'Content-Type': \"application/json\",\n  //                     \"accept\": 'application/json'\n  //                 },\n  //                 body: JSON.stringify(likedMovieObj)\n  //             })\n  //                 .then(response => response.json())\n  //                 .then(data => {\n  //                     console.log(\"data in liked_movies POST\", data)\n  //                     this.setState((prevState) => ({\n  //                         likedMovies: [...prevState.likedMovies, data]\n  //                     }))\n  //                     this.checkIfMovieMatched(data)\n  //                 })\n  //         }\n  // }\n  // checkIfMovieMatched = (data) => {\n  //     if (this.state.likedMovies.filter((obj) => { return obj.user.id !== data.user.id }).map(obj => obj.movie.netflixid).includes(data.movie.netflixid)) {\n  //         alert(\"You've got a match!\")\n  //     }\n  //     else {\n  //         console.log(\"movie did not match\")\n  //     }\n  // }\n  // changeGenreFilter = (filterValue) => {\n  //     this.setState({\n  //         genreFilter: filterValue\n  //     })\n  // }\n  // changeLanguageFilter = (filterValue) => {\n  //     this.setState({\n  //         languageFilter: filterValue\n  //     })\n  // }\n  // changeMediaFilter = (filterValue) => {\n  //     this.setState({\n  //         mediaFilter: filterValue\n  //     })\n  // }\n  // filterAllMovies = () => {\n  //     let arrayToReturn = this.state.movies\n  //     if(this.state.genreFilter !== \"All\"){\n  //         arrayToReturn = this.state.movies.filter((movieObj) => {\n  //             return movieObj.includes(this.state.genreFilter)\n  //     })\n  //     }\n  //     this.setState({\n  //         movies: arrayToReturn\n  //     })\n  // }\n  render() {\n    // let someMovies = this.state.movies.splice(0, 10)\n    let smallDeck = this.state.frankensteinMoviesArray.splice(0, 10);\n\n    let deckOfCards = _.sample(this.state.frankensteinMoviesArray, 10);\n\n    console.log(\"Deck\", deckOfCards);\n    console.log(\"all movies\", this.state.frankensteinMoviesArray);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"root\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.lastDirection === 'right' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"infoText\",\n            children: \"Added to Liked Movies!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 79\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 57\n        }, this) : this.state.lastDirection === 'left' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"infoText\",\n            children: \"That Movie Sucked!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 79\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 57\n        }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"infoText\",\n          children: \"Swipe a card to get started!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cardContainer\",\n        children: this.state.movies.map(movie => /*#__PURE__*/_jsxDEV(TinderCard, {\n          className: \"swipe\",\n          preventSwipe: ['up', 'down'],\n          onSwipe: dir => this.swipeHandler(dir, movie),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundImage: `url(${movie[\"poster\"]})`\n            },\n            className: \"card\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: movie[\"title\"]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: movie[\"genre\"]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 17\n          }, this)\n        }, movie[\"netflixid\"], false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default TinderCards;","map":{"version":3,"sources":["/Users/mushfichowdhury/Flatiron/code/Projects/Mod4-PickFlix/pickflix-frontend/src/Pick Page/TinderCards.js"],"names":["React","TinderCard","GenreFilter","withAlert","_","TinderCards","Component","state","movies","likedMovies","componentDidMount","fetch","then","resp","json","moviesArray","setState","data","addLikedMovie","movie","likedMovieObj","user_id","props","currentUser","id","movie_id","filter","obj","user","map","netflixid","includes","console","log","alert","method","headers","Accepts","body","JSON","stringify","response","prevState","checkIfMovieMatched","swipeHandler","dir","likedArray","lastDirection","priority","render","smallDeck","frankensteinMoviesArray","splice","deckOfCards","sample","backgroundImage"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TinderCard from 'react-tinder-card';\nimport \"./TinderCards.css\"\nimport GenreFilter from './GenreFilter';\nimport { withAlert } from 'react-alert'\nimport _ from 'underscore'\n// import { Console } from 'console';\nclass TinderCards extends React.Component {\n\n    state= {\n        movies: [],\n        likedMovies: [],\n    }\n\n    componentDidMount = () => {\n        fetch(\"https://pick-flix.herokuapp.com/movies\")\n            .then(resp => resp.json())\n            .then((moviesArray) => {\n                this.setState({\n                    movies: moviesArray\n                })\n            })\n\n        fetch(\"https://pick-flix.herokuapp.com/liked_movies\")\n            .then(resp => resp.json())\n            .then((data) => {\n                this.setState({\n                    likedMovies: data\n                })\n            })\n    }\n\n    addLikedMovie = (movie) => {\n        let likedMovieObj = {\n            user_id: this.props.currentUser.id,\n            movie_id: movie.id\n        }\n        if (this.state.likedMovies.filter((obj) => { return obj.user.id === this.props.currentUser.id }).map(obj => obj.movie.netflixid).includes(movie.netflixid)) {\n            console.log(\"Did not add\")\n            // this.alert.show(\"You've already picked this flix!\")\n            alert(\"You've already picked this flix!\")\n        }\n        else {\n            console.log(\"adding movie\")\n            fetch(\"https://pick-flix.herokuapp.com/liked_movies\", {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': \"application/json\",\n                    Accepts: 'application/json'\n                },\n                body: JSON.stringify(likedMovieObj)\n            })\n                .then(response => response.json())\n                .then(data => {\n                    this.setState((prevState) => ({\n                        likedMovies: [...prevState.likedMovies, data]\n                    }))\n                    this.checkIfMovieMatched(data)\n                })\n        }\n    }\n\n    checkIfMovieMatched = (data) => {\n        if (this.state.likedMovies.filter((obj) => { return obj.user.id !== data.user.id }).map(obj => obj.movie.netflixid).includes(data.movie.netflixid)) {\n            alert(\"You've got a match!\")\n        }\n        else {\n            console.log(\"movie did not match\")\n        }\n    }\n\n    swipeHandler = (dir, movie) => {\n        if (dir === 'right') {\n            this.setState((prevState) => ({\n                likedArray: [...prevState.likedArray, movie],\n                lastDirection: dir\n            }))\n            console.log(movie)\n            this.addLikedMovie(movie)\n        }\n        else {\n            movie.priority -= 1\n            this.setState({ lastDirection: dir })\n        }\n    }\n\n    // BELOW IS THE FRANKENSTEIN VERSION WE WILL COME BACK TO LATER\n    // setRandomGenreIds = () => {\n\n    //     let allGenreIds = [10673, 10702, 11804, 11828, 1192487, 1365, 1568, 2125, 2653, 43040, 43048, 4344, 46576, 75418, 76501, 77232, 788212, 801362, 852490, 899, 9584, 10695, 11146, 2653, 2729, 3063, 413820, 452, 6721, 7424, 9302, 10056, 27480, 27950, 28034, 28083, 28233, 48586, 5455, 561, 6218, 6796, 6962, 78120, 783, 89513, 10032, 11093, 13158, 29809, 2994, 31273, 31574, 31694, 32392, 46553, 46560, 46576, 46588, 47147, 47465, 48303, 48586, 48744, 76186, 1009, 10256, 10375, 105, 10778, 11559, 11755, 1208951, 1333288, 1402, 1747, 17648, 2030, 2700, 31694, 3300, 34157, 3519, 3996, 4058, 4195, 43040, 4426, 4906, 52104, 52140, 52847, 5286, 5475, 5610, 56174, 58905, 59169, 61132, 61330, 6197, 63092, 63115, 6548, 711366, 7120, 72407, 7539, 77599, 77907, 78163, 78655, 79871, 7992, 852492, 869, 89585, 9302, 9434, 9702, 9736, 10944, 3675, 4734, 74652, 7627, 9434, 10005, 10105, 10599, 1159, 15456, 180, 2595, 26126, 2760, 28269, 3652, 3675, 4006, 4720, 48768, 49110, 49547, 50232, 5161, 5349, 55087, 56178, 58710, 60026, 6839, 7018, 72384, 77245, 852494, 90361, 9875, 11, 11075, 11714, 1208954, 1255, 12994, 13158, 2150, 25955, 26009, 2696, 2748, 2757, 2893, 29809, 3179, 31901, 34204, 3653, 3682, 384, 3916, 3947, 4282, 4425, 452, 4961, 500, 5012, 52148, 52904, 56169, 5763, 58677, 58755, 58796, 59064, 6206, 62235, 6616, 6763, 68699, 6889, 711367, 71591, 72354, 7243, 7539, 75459, 76507, 78628, 852493, 89804, 9299, 9847, 9873, 26835, 52804, 751423, 3329, 4720, 500, 5977, 65263, 7120, 10695, 10944, 1694, 42023, 45028, 48303, 61546, 75405, 75804, 75930, 8195, 83059, 8711, 89585, 11804, 3269, 384, 4195, 56184, 69192, 7077, 875, 9916, 1192487, 1195213, 1208951, 1208954, 1218090, 78367, 852488, 852490, 852491, 852492, 852493, 852494, 10032, 10741, 1701, 2222, 2856, 5096, 52843, 6031, 13335, 13573, 32392, 52852, 55774, 59433, 84488, 88635, 29281, 36103, 502675, 108533, 11014, 1372, 1492, 1568, 1694, 2595, 2729, 3327, 3916, 47147, 4734, 49110, 50232, 52780, 52849, 5903, 6000, 6926, 852491, 180, 25788, 4370, 5286, 7243, 9327, 10306, 10499, 10504, 10719, 11014, 11140, 1138506, 1321, 1774, 3269, 43048, 46588, 5505, 58798, 65558, 6867, 75390, 78507, 799, 852488, 8933, 89811, 9147, 972, 12739, 51063, 801362, 1365, 43040, 1568, 43048, 11881, 7442, 3761, 6031, 4906, 9847, 10778, 5661, 3327, 760, 5507, 50462, 7424, 2653, 9302, 452, 11146, 3063, 10695, 2729, 1433679, 6721, 5923, 6133, 69616, 29764, 77232, 78104, 2030, 3936, 11075, 5230, 10719, 52387, 89804, 89844, 8195, 69946, 12339, 12762, 262, 846815, 3652, 3179, 90139, 77907, 5480, 12443, 17648, 28269, 4425, 798, 84488, 84489, 69624, 1009, 6051, 3682, 52508, 10757, 12433, 1774, 52140, 52148, 52120, 52117, 52104, 1252, 56174, 56178, 56169, 56181, 63151, 56184, 58704, 846810, 702387, 846807, 783, 3960, 46576, 46560, 48586, 31694, 2994, 29809, 32473, 48303, 31574, 32392, 11093, 31273, 47147, 46588, 46553, 48744, 47465, 10032, 69636, 6548, 78163, 53717, 10118, 49266, 7129, 1105, 528582748, 25955, 6895, 788212, 9584, 4058, 9875, 6889, 5824, 10185, 10499, 26126, 26009, 26146, 37938, 899, 9736, 6206, 3979, 875, 5903, 9434, 10944, 7627, 4734, 74652, 8451, 5080, 59169, 60339, 60026, 59064, 58700, 77951, 869, 45028, 3493, 67673, 59433, 6839, 5763, 4961, 13158, 12994, 3653, 89513, 79871, 9873, 89441, 10606, 89442, 5254, 10659, 52858, 89708, 11079, 26835, 52804, 52855, 58879, 52847, 31901, 51058, 51056, 52849, 9744, 77599, 7687, 62285, 78503, 72436, 3890, 12803, 11828, 4426, 5161, 2150, 8243, 8654, 7462, 6485, 10306, 58905, 58710, 58677, 58807, 58798, 31851, 7120, 4720, 500, 5977, 65263, 63115, 58755, 58886, 65198, 82489, 867737, 5096, 61115, 108663, 108663, 9793, 27018, 5349, 71591, 107985, 393181, 89585, 8711, 11804, 4195, 384, 7077, 3269, 9942, 5051, 10463, 2222, 852490, 852492, 852494, 852493, 1218090, 78367, 852491, 852488, 1192487, 1208951, 1208954, 1195213, 48785, 58750, 3300, 4282, 8221, 6867, 1293326, 4344, 1747, 2893, 10750, 65925, 10398, 1402191, 6000, 799, 711366, 711367, 64256, 1461923, 64256, 1138506, 10271, 413820, 751423, 52843, 28233, 27950, 27480, 28034, 28083, 27346, 8248, 6626, 1989, 5685, 11283, 68699, 67879, 1402, 3996, 15456, 6763, 1613, 88635, 75408, 67708, 10741, 34157, 1333288, 8985, 6695, 34204, 105, 2757, 7825, 67644, 5875, 76501, 77245, 76507, 76510, 2125, 4006, 11, 25804, 4814, 26, 9090, 76186, 947, 10056, 6796, 6962, 6218, 5455, 561, 1701, 90361, 52852, 84483, 13335, 9994, 48768, 49547, 10365, 63782, 1138254, 78120, 78655, 78208, 78628, 78321, 78634, 61132, 78463, 62235, 62510, 78507, 78373, 12123, 75418, 79049, 75459, 75436, 75415, 75390, 75392, 2700, 7018, 6616, 10504, 55087, 2145, 5505, 8721, 36103, 6073, 9833, 3081, 10005, 1408777, 3278, 4649, 5475, 61656, 1255, 502675, 3830, 7153, 3329, 9916, 17241, 17241, 1458609, 8883, 3830, 78250, 60829, 26156, 26052, 11567, 6998, 4922, 11755, 1884, 10599, 2696, 69192, 9292, 1321, 76802, 108533, 1492, 6926, 3916, 1694, 11014, 2595, 52780, 49110, 50232, 9702, 5012, 13573, 53310, 5608, 3903, 10256, 8646, 1519826, 12549, 3215, 3675, 3947, 9196, 61330, 58796, 61546, 61546, 58741, 65558, 67675, 6814, 2760, 9327, 5286, 180, 7243, 4370, 25788, 10702, 9147, 55774, 11559, 29281, 35800, 972, 42023, 11140, 63092, 63975, 62016, 76793, 1516534, 6384, 3519, 9299, 53915, 52147, 60951, 10832, 8933, 1159, 48762, 10673, 7992, 11177, 10375, 7539, 10105, 11714, 83059, 4366, 1372, 83, 5610, 10634, 26105, 52904, 89811, 11522, 9472, 1159493, 75445, 72407, 72384, 72354, 72404, 75432, 75804, 5342, 1800, 6197, 75930, 7700, 1458, 2856, 70023, 75405, 711367, 64256, 2893]\n    //     let sampleGenreIds = _.sample(allGenreIds, 10)\n    //     let genreIdString = sampleGenreIds.join()\n    //     return genreIdString\n    // }\n\n    // componentDidMount = () => {\n    //     let genreIdString = this.setRandomGenreIds()\n\n    //     fetch(\"https://unogs-unogs-v1.p.rapidapi.com/api.cgi?t=genres\", {\n    //         \"method\": \"GET\",\n    //         \"headers\": {\n    //             \"x-rapidapi-key\": \"8afd7ffa98msh66c5e14a405f912p133da5jsne6eb4d751d16\",\n    //             \"x-rapidapi-host\": \"unogs-unogs-v1.p.rapidapi.com\"\n    //         }\n    //     })\n    //         .then(response => response.json())\n    //         .then(data => this.setState({genreIdsWithNamesArray: data[\"ITEMS\"]}))\n    //         .catch(err => {\n    //             console.error(err);\n    //         });\n        \n    //     fetch(`https://rapidapi.p.rapidapi.com/aaapi.cgi?q=%7Bquery%7D-!1900%2C2018-!0%2C5-!0%2C10-!${genreIdString}-!Any-!Any-!Any-!gt100-!%7Bdownloadable%7D&t=ns&cl=all&st=adv&ob=Relevance&p=1&sa=and`, {\n    //         \"method\": \"GET\",\n    //         \"headers\": {\n    //             \"x-rapidapi-key\": \"8afd7ffa98msh66c5e14a405f912p133da5jsne6eb4d751d16\",\n    //             \"x-rapidapi-host\": \"unogs-unogs-v1.p.rapidapi.com\"\n    //         }\n    //     })\n    //         .then(resp => resp.json())\n    //         .then(moviesArr => {\n    //             this.setState({ movies: moviesArr[\"ITEMS\"] })\n    //             this.createMovieObjects(this.state.movies)\n    //         })\n    //     fetch(\"http://localhost:3000/liked_movies\")\n    //         .then(resp => resp.json())\n    //         .then((data) => this.setState({ likedMovies: data }))\n\n    // }\n\n    // createMovieObjects = (moviesArr) => {\n    //     let apiKey = \"91b02583\"\n    //     let newArray = moviesArr.map(movie => {\n    //         this.omdbRequest(movie, apiKey)         \n    //     })\n    // }\n\n    // omdbRequest = (movie, apiKey) => {\n    //     console.log(\"movie from omdb request\", movie)\n    //     fetch(`http://omdbapi.com/?i=${movie[\"imdbid\"]}&apikey=${apiKey}&plot=full`)\n    //         .then(r=>r.json())\n    //         .then(data => {\n    //             console.log(\"line 80\", data)\n    //             this.setState({ omdbData: data})\n    //             movie = {\n    //                 \"netflixid\": movie[\"netflixid\"],\n    //                 \"title\": movie[\"title\"],\n    //                 \"image\": movie[\"image\"],\n    //                 \"rating\": movie[\"rating\"],\n    //                 \"media\": movie[\"type\"],\n    //                 \"runtime\": movie[\"runtime\"],\n    //                 \"largeimage\": movie[\"largeimage\"],\n    //                 \"imdbid\": movie[\"imdbid\"],\n    //                 \"priority\": 10,\n    //                 \"genre\": data[\"Genre\"],\n    //                 \"year\": data[\"Year\"],\n    //                 \"released\": data[\"Released\"],\n    //                 \"rated\": data[\"Rated\"],\n    //                 \"director\": data[\"Director\"],\n    //                 \"writer\": data[\"Writer\"],\n    //                 \"actors\": data[\"Actors\"],\n    //                 \"plot\": data[\"Plot\"],\n    //                 \"language\": data[\"Language\"],\n    //                 \"country\": data[\"Country\"],\n    //                 \"awards\": data[\"Awards\"],\n    //                 \"poster\": data[\"Poster\"],\n    //                 \"imdbRating\": data[\"imdbRating\"],\n    //                 \"imdbVotes\": data[\"imdbVotes\"]\n    //             }\n    //             this.setState((prevState) => ({frankensteinMoviesArray: [...prevState.frankensteinMoviesArray, movie]}) )  \n    //             })\n    //             console.log(\"frankenarray\", this.state.frankensteinMoviesArray)\n    //         }\n    \n    // swipeHandler = (dir, movie) => {\n    //     if(dir === 'right') {\n    //         this.setState((prevState) => ({\n    //             likedArray: [...prevState.likedArray, movie],\n    //             lastDirection: dir\n    //         }))\n    //         this.addMovieToDatabase(movie)\n    //         console.log(movie)\n    //     }\n    //     else {\n    //         movie.priority -= 1\n    //         this.setState({ lastDirection: dir})\n    //     }\n    // }\n\n    // addMovieToDatabase = (movie) => {\n    //     console.log(\"swiped movie\", movie)\n    //     fetch(\"http://localhost:3000/movies\", {\n    //         method: \"POST\",\n    //         headers: {\n    //             \"content-type\": \"application/json\",\n    //             \"accept\": \"application/json\"\n    //         },\n    //         body: JSON.stringify(movie)\n    //     })\n    //         .then(r=>r.json())\n    //         .then(data => {\n    //             console.log(\"new movie data\", data)\n    //             this.setState({\n    //                 addedMovieObj: data,\n    //                 isMovieAdded: true\n    //             })\n\n    //         }\n    //         )\n    //     _.delay(this.addLikedMovie, 1000)\n    // }\n\n    // addLikedMovie = () => {\n    //         let likedMovieObj = {\n    //             user_id: this.props.currentUser.id,\n    //             movie_id: this.state.addedMovieObj.id\n    //         }\n    //         console.log(\"liked movie object 103\", likedMovieObj)\n    //         if (this.state.likedMovies.filter((obj) => { return obj.user.id === 1 }).map(obj => obj.movie.netflixid).includes(this.state.addedMovieObj.netflixid)) {\n    //             console.log(\"Did not add\")\n    //             alert(\"You've already picked this flix!\")\n    //         }\n    //         else {\n    //             console.log(\"adding movie\")\n    //             fetch(\"http://localhost:3000/liked_movies\", {\n    //                 method: \"POST\",\n    //                 headers: {\n    //                     'Content-Type': \"application/json\",\n    //                     \"accept\": 'application/json'\n    //                 },\n    //                 body: JSON.stringify(likedMovieObj)\n    //             })\n    //                 .then(response => response.json())\n    //                 .then(data => {\n    //                     console.log(\"data in liked_movies POST\", data)\n    //                     this.setState((prevState) => ({\n    //                         likedMovies: [...prevState.likedMovies, data]\n    //                     }))\n    //                     this.checkIfMovieMatched(data)\n    //                 })\n    //         }\n            \n    // }\n\n    // checkIfMovieMatched = (data) => {\n    //     if (this.state.likedMovies.filter((obj) => { return obj.user.id !== data.user.id }).map(obj => obj.movie.netflixid).includes(data.movie.netflixid)) {\n    //         alert(\"You've got a match!\")\n    //     }\n    //     else {\n    //         console.log(\"movie did not match\")\n    //     }\n    // }\n\n    // changeGenreFilter = (filterValue) => {\n    //     this.setState({\n    //         genreFilter: filterValue\n    //     })\n    // }\n\n    // changeLanguageFilter = (filterValue) => {\n    //     this.setState({\n    //         languageFilter: filterValue\n    //     })\n    // }\n\n    // changeMediaFilter = (filterValue) => {\n    //     this.setState({\n    //         mediaFilter: filterValue\n    //     })\n    // }\n\n    // filterAllMovies = () => {\n    //     let arrayToReturn = this.state.movies\n    //     if(this.state.genreFilter !== \"All\"){\n    //         arrayToReturn = this.state.movies.filter((movieObj) => {\n    //             return movieObj.includes(this.state.genreFilter)\n    //     })\n    //     }\n    //     this.setState({\n    //         movies: arrayToReturn\n    //     })\n    // }\n\n    render() {\n        // let someMovies = this.state.movies.splice(0, 10)\n        let smallDeck = this.state.frankensteinMoviesArray.splice(0, 10)\n        let deckOfCards = _.sample(this.state.frankensteinMoviesArray, 10)\n        console.log(\"Deck\", deckOfCards)\n        console.log(\"all movies\", this.state.frankensteinMoviesArray)\n    return (\n        <div className=\"root\">\n            {/* <GenreFilter\n                genreFilter={this.state.genreFilter}\n                languageFilter={this.state.languageFilter}\n                mediaFilter={this.state.mediaFilter}\n                changeGenreFilter={this.changeGenreFilter}\n                changeLanguageFilter={this.changeLanguageFilter}\n                changeMediaFilter={this.changeMediaFilter}\n            />\n                <br></br>\n                <hr></hr>\n                <br></br> */}\n            <div>\n                {this.state.lastDirection === 'right' ? <div className=\"flex\"><h2 className='infoText'>Added to Liked Movies!</h2></div> \n                : this.state.lastDirection === 'left' ? <div className=\"flex\"><h2 className='infoText'>That Movie Sucked!</h2></div> \n                : <h2 className='infoText'>Swipe a card to get started!</h2>}\n            </div>\n            <div className=\"cardContainer\" >\n            {this.state.movies.map(movie => (\n                <TinderCard\n                className=\"swipe\"\n                key={movie[\"netflixid\"]}\n                preventSwipe={['up', 'down']}\n                onSwipe={(dir) => this.swipeHandler(dir, movie)}\n                >\n                <div \n                style={{ backgroundImage: `url(${movie[\"poster\"]})` }}\n                className=\"card\">\n                    <h1>{movie[\"title\"]}</h1>\n                    <h4>{movie[\"genre\"]}</h4>\n                    {/* <h5>{movie.plot}</h5> */}\n                </div>\n                </TinderCard>\n            ))}\n            </div>\n        </div>\n    )\n    }\n}   \n\nexport default TinderCards\n"]},"metadata":{},"sourceType":"module"}