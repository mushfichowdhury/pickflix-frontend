{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mushfichowdhury/Flatiron/code/Projects/Mod4-PickFlix/pickflix-frontend/src/Pick Page/TinderCards.js\";\nimport React from 'react';\nimport TinderCard from 'react-tinder-card';\nimport \"./TinderCards.css\";\nimport GenreFilter from './GenreFilter';\nimport { withAlert } from 'react-alert';\nimport _ from 'underscore'; // import { Console } from 'console';\n\nclass TinderCards extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movies: [],\n      likedMovies: [],\n      likedArray: []\n    };\n\n    this.componentDidMount = () => {\n      fetch(\"https://pick-flix.herokuapp.com/movies\").then(resp => resp.json()).then(moviesArray => {\n        this.setState({\n          movies: moviesArray\n        });\n      });\n      fetch(\"https://pick-flix.herokuapp.com/liked_movies\").then(resp => resp.json()).then(data => {\n        this.setState({\n          likedMovies: data\n        });\n      });\n    };\n\n    this.addLikedMovie = movie => {\n      let likedMovieObj = {\n        user_id: this.props.currentUser.id,\n        movie_id: movie.id\n      };\n\n      if (this.state.likedMovies.filter(obj => {\n        return obj.user.id === this.props.currentUser.id;\n      }).map(obj => obj.movie.movie_id).includes(movie.movie_id)) {\n        console.log(\"Did not add\");\n        alert(\"You've already picked this flix!\");\n      } else {\n        console.log(\"adding movie\");\n        fetch(\"https://pick-flix.herokuapp.com/liked_movies\", {\n          method: \"POST\",\n          headers: {\n            'Content-Type': \"application/json\",\n            Accepts: 'application/json'\n          },\n          body: JSON.stringify(likedMovieObj)\n        }).then(response => response.json()).then(data => {\n          this.setState(prevState => ({\n            likedMovies: [...prevState.likedMovies, data]\n          }));\n          this.checkIfMovieMatched(data);\n        });\n      }\n    };\n\n    this.checkIfMovieMatched = data => {\n      if (this.state.likedMovies.filter(obj => {\n        return obj.user.id !== data.user.id;\n      }).map(obj => obj.movie.movie_id).includes(data.movie.movie_id)) {\n        alert(\"You've got a match!\");\n      } else {\n        console.log(\"movie did not match\");\n      }\n    };\n\n    this.swipeHandler = (dir, movie) => {\n      if (dir === 'right') {\n        this.setState(prevState => ({\n          likedArray: [...prevState.likedArray, movie],\n          lastDirection: dir\n        }));\n        console.log(movie);\n        this.addLikedMovie(movie);\n      } else {\n        movie.priority -= 1;\n        this.setState({\n          lastDirection: dir\n        });\n      }\n    };\n  }\n\n  render() {\n    console.table(\"ALL MOVIES\", this.state.movies);\n    base_img_url = \"https://image.tmdb.org/t/p/original/\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"root\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.lastDirection === 'right' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"infoText\",\n            children: \"Added to Liked Movies!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 79\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 57\n        }, this) : this.state.lastDirection === 'left' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"infoText\",\n            children: \"That Movie Sucked!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 79\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 57\n        }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"infoText\",\n          children: \"Swipe a card to get started!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cardContainer\",\n        children: this.state.movies.map(movie => /*#__PURE__*/_jsxDEV(TinderCard, {\n          className: \"swipe\",\n          preventSwipe: ['up', 'down'],\n          onSwipe: dir => this.swipeHandler(dir, movie),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundImage: movie[\"backdrop\"]\n            },\n            className: \"card\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: movie[\"name\"]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: movie[\"poster\"]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 17\n          }, this)\n        }, movie[\"id\"], false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default TinderCards;","map":{"version":3,"sources":["/Users/mushfichowdhury/Flatiron/code/Projects/Mod4-PickFlix/pickflix-frontend/src/Pick Page/TinderCards.js"],"names":["React","TinderCard","GenreFilter","withAlert","_","TinderCards","Component","state","movies","likedMovies","likedArray","componentDidMount","fetch","then","resp","json","moviesArray","setState","data","addLikedMovie","movie","likedMovieObj","user_id","props","currentUser","id","movie_id","filter","obj","user","map","includes","console","log","alert","method","headers","Accepts","body","JSON","stringify","response","prevState","checkIfMovieMatched","swipeHandler","dir","lastDirection","priority","render","table","base_img_url","backgroundImage"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TinderCard from 'react-tinder-card';\nimport \"./TinderCards.css\"\nimport GenreFilter from './GenreFilter';\nimport { withAlert } from 'react-alert'\nimport _ from 'underscore'\n// import { Console } from 'console';\nclass TinderCards extends React.Component {\n\n    state= {\n        movies: [],\n        likedMovies: [],\n        likedArray: []\n    }\n\n\n    componentDidMount = () => {\n        fetch(\"https://pick-flix.herokuapp.com/movies\")\n            .then(resp => resp.json())\n            .then((moviesArray) => {\n                this.setState({\n                    movies: moviesArray\n                })\n            })\n\n        fetch(\"https://pick-flix.herokuapp.com/liked_movies\")\n            .then(resp => resp.json())\n            .then((data) => {\n                this.setState({\n                    likedMovies: data\n                })\n            })\n    }\n\n    addLikedMovie = (movie) => {\n        let likedMovieObj = {\n            user_id: this.props.currentUser.id,\n            movie_id: movie.id\n        }\n        if (this.state.likedMovies.filter((obj) => { return obj.user.id === this.props.currentUser.id }).map(obj => obj.movie.movie_id).includes(movie.movie_id)) {\n            console.log(\"Did not add\")\n            alert(\"You've already picked this flix!\")\n        }\n        else {\n            console.log(\"adding movie\")\n            fetch(\"https://pick-flix.herokuapp.com/liked_movies\", {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': \"application/json\",\n                    Accepts: 'application/json'\n                },\n                body: JSON.stringify(likedMovieObj)\n            })\n                .then(response => response.json())\n                .then(data => {\n                    this.setState((prevState) => ({\n                        likedMovies: [...prevState.likedMovies, data]\n                    }))\n                    this.checkIfMovieMatched(data)\n                })\n        }\n    }\n\n    checkIfMovieMatched = (data) => {\n        if (this.state.likedMovies.filter((obj) => { return obj.user.id !== data.user.id }).map(obj => obj.movie.movie_id).includes(data.movie.movie_id)) {\n            alert(\"You've got a match!\")\n        }\n        else {\n            console.log(\"movie did not match\")\n        }\n    }\n\n    swipeHandler = (dir, movie) => {\n        if (dir === 'right') {\n            this.setState((prevState) => ({\n                likedArray: [...prevState.likedArray, movie],\n                lastDirection: dir\n            }))\n            console.log(movie)\n            this.addLikedMovie(movie)\n        }\n        else {\n            movie.priority -= 1\n            this.setState({ lastDirection: dir })\n        }\n    }\n\n    render() {\n        console.table(\"ALL MOVIES\", this.state.movies)\n        base_img_url = \"https://image.tmdb.org/t/p/original/\"\n\n    return (\n        <div className=\"root\">\n            <div>\n                {this.state.lastDirection === 'right' ? <div className=\"flex\"><h2 className='infoText'>Added to Liked Movies!</h2></div> \n                : this.state.lastDirection === 'left' ? <div className=\"flex\"><h2 className='infoText'>That Movie Sucked!</h2></div> \n                : <h2 className='infoText'>Swipe a card to get started!</h2>}\n            </div>\n            <div className=\"cardContainer\" >\n            {this.state.movies.map(movie => (\n                <TinderCard\n                className=\"swipe\"\n                key={movie[\"id\"]}\n                preventSwipe={['up', 'down']}\n                onSwipe={(dir) => this.swipeHandler(dir, movie)}\n                >\n                <div \n                style={{ backgroundImage: movie[\"backdrop\"] }}\n                className=\"card\">\n                    <h1>{movie[\"name\"]}</h1>\n                    <img src={movie[\"poster\"]} />\n                    {/* <h4>{movie[\"genre\"]}</h4> */}\n                    {/* <h5>{movie[\"overview\"]}</h5> */}\n                </div>\n                </TinderCard>\n            ))}\n            </div>\n        </div>\n    )\n    }\n}   \n\nexport default TinderCards\n"]},"metadata":{},"sourceType":"module"}