{"ast":null,"code":"import _ from './underscore.js';\nimport { toString, SymbolProto } from './_setup.js';\nimport getByteLength from './_getByteLength.js';\nimport isTypedArray from './isTypedArray.js';\nimport isFunction from './isFunction.js';\nimport keys from './keys.js';\nimport has from './_has.js'; // Internal recursive comparison function for `_.isEqual`.\n\nfunction eq(a, b, aStack, bStack) {\n  // Identical objects are equal. `0 === -0`, but they aren't identical.\n  // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).\n  if (a === b) return a !== 0 || 1 / a === 1 / b; // `null` or `undefined` only equal to itself (strict comparison).\n\n  if (a == null || b == null) return false; // `NaN`s are equivalent, but non-reflexive.\n\n  if (a !== a) return b !== b; // Exhaust primitive checks\n\n  var type = typeof a;\n  if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\n  return deepEq(a, b, aStack, bStack);\n} // Internal recursive comparison function for `_.isEqual`.\n\n\nfunction deepEq(a, b, aStack, bStack) {\n  // Unwrap any wrapped objects.\n  if (a instanceof _) a = a._wrapped;\n  if (b instanceof _) b = b._wrapped; // Compare `[[Class]]` names.\n\n  var className = toString.call(a);\n  if (className !== toString.call(b)) return false;\n\n  switch (className) {\n    // These types are compared by value.\n    case '[object RegExp]': // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n\n    case '[object String]':\n      // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n      // equivalent to `new String(\"5\")`.\n      return '' + a === '' + b;\n\n    case '[object Number]':\n      // `NaN`s are equivalent, but non-reflexive.\n      // Object(NaN) is equivalent to NaN.\n      if (+a !== +a) return +b !== +b; // An `egal` comparison is performed for other numeric values.\n\n      return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n\n    case '[object Date]':\n    case '[object Boolean]':\n      // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n      // millisecond representations. Note that invalid dates with millisecond representations\n      // of `NaN` are not equivalent.\n      return +a === +b;\n\n    case '[object Symbol]':\n      return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\n\n    case '[object ArrayBuffer]':\n      // Coerce to `DataView` so we can fall through to the next case.\n      return deepEq(new DataView(a), new DataView(b), aStack, bStack);\n\n    case '[object DataView]':\n      var byteLength = getByteLength(a);\n\n      if (byteLength !== getByteLength(b)) {\n        return false;\n      }\n\n      while (byteLength--) {\n        if (a.getUint8(byteLength) !== b.getUint8(byteLength)) {\n          return false;\n        }\n      }\n\n      return true;\n  }\n\n  if (isTypedArray(a)) {\n    // Coerce typed arrays to `DataView`.\n    return deepEq(new DataView(a.buffer), new DataView(b.buffer), aStack, bStack);\n  }\n\n  var areArrays = className === '[object Array]';\n\n  if (!areArrays) {\n    if (typeof a != 'object' || typeof b != 'object') return false; // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n    // from different frames are.\n\n    var aCtor = a.constructor,\n        bCtor = b.constructor;\n\n    if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor && isFunction(bCtor) && bCtor instanceof bCtor) && 'constructor' in a && 'constructor' in b) {\n      return false;\n    }\n  } // Assume equality for cyclic structures. The algorithm for detecting cyclic\n  // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n  // Initializing stack of traversed objects.\n  // It's done here since we only need them for objects and arrays comparison.\n\n\n  aStack = aStack || [];\n  bStack = bStack || [];\n  var length = aStack.length;\n\n  while (length--) {\n    // Linear search. Performance is inversely proportional to the number of\n    // unique nested structures.\n    if (aStack[length] === a) return bStack[length] === b;\n  } // Add the first object to the stack of traversed objects.\n\n\n  aStack.push(a);\n  bStack.push(b); // Recursively compare objects and arrays.\n\n  if (areArrays) {\n    // Compare array lengths to determine if a deep comparison is necessary.\n    length = a.length;\n    if (length !== b.length) return false; // Deep compare the contents, ignoring non-numeric properties.\n\n    while (length--) {\n      if (!eq(a[length], b[length], aStack, bStack)) return false;\n    }\n  } else {\n    // Deep compare objects.\n    var _keys = keys(a),\n        key;\n\n    length = _keys.length; // Ensure that both objects contain the same number of properties before comparing deep equality.\n\n    if (keys(b).length !== length) return false;\n\n    while (length--) {\n      // Deep compare each member\n      key = _keys[length];\n      if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n    }\n  } // Remove the first object from the stack of traversed objects.\n\n\n  aStack.pop();\n  bStack.pop();\n  return true;\n} // Perform a deep comparison to check if two objects are equal.\n\n\nexport default function isEqual(a, b) {\n  return eq(a, b);\n}","map":{"version":3,"sources":["/Users/mushfichowdhury/Flatiron/code/Projects/Mod4-PickFlix/pickflix-frontend/node_modules/underscore/modules/isEqual.js"],"names":["_","toString","SymbolProto","getByteLength","isTypedArray","isFunction","keys","has","eq","a","b","aStack","bStack","type","deepEq","_wrapped","className","call","valueOf","DataView","byteLength","getUint8","buffer","areArrays","aCtor","constructor","bCtor","length","push","_keys","key","pop","isEqual"],"mappings":"AAAA,OAAOA,CAAP,MAAc,iBAAd;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,aAAtC;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,GAAP,MAAgB,WAAhB,C,CAEA;;AACA,SAASC,EAAT,CAAYC,CAAZ,EAAeC,CAAf,EAAkBC,MAAlB,EAA0BC,MAA1B,EAAkC;AAChC;AACA;AACA,MAAIH,CAAC,KAAKC,CAAV,EAAa,OAAOD,CAAC,KAAK,CAAN,IAAW,IAAIA,CAAJ,KAAU,IAAIC,CAAhC,CAHmB,CAIhC;;AACA,MAAID,CAAC,IAAI,IAAL,IAAaC,CAAC,IAAI,IAAtB,EAA4B,OAAO,KAAP,CALI,CAMhC;;AACA,MAAID,CAAC,KAAKA,CAAV,EAAa,OAAOC,CAAC,KAAKA,CAAb,CAPmB,CAQhC;;AACA,MAAIG,IAAI,GAAG,OAAOJ,CAAlB;AACA,MAAII,IAAI,KAAK,UAAT,IAAuBA,IAAI,KAAK,QAAhC,IAA4C,OAAOH,CAAP,IAAY,QAA5D,EAAsE,OAAO,KAAP;AACtE,SAAOI,MAAM,CAACL,CAAD,EAAIC,CAAJ,EAAOC,MAAP,EAAeC,MAAf,CAAb;AACD,C,CAED;;;AACA,SAASE,MAAT,CAAgBL,CAAhB,EAAmBC,CAAnB,EAAsBC,MAAtB,EAA8BC,MAA9B,EAAsC;AACpC;AACA,MAAIH,CAAC,YAAYT,CAAjB,EAAoBS,CAAC,GAAGA,CAAC,CAACM,QAAN;AACpB,MAAIL,CAAC,YAAYV,CAAjB,EAAoBU,CAAC,GAAGA,CAAC,CAACK,QAAN,CAHgB,CAIpC;;AACA,MAAIC,SAAS,GAAGf,QAAQ,CAACgB,IAAT,CAAcR,CAAd,CAAhB;AACA,MAAIO,SAAS,KAAKf,QAAQ,CAACgB,IAAT,CAAcP,CAAd,CAAlB,EAAoC,OAAO,KAAP;;AACpC,UAAQM,SAAR;AACE;AACA,SAAK,iBAAL,CAFF,CAGI;;AACF,SAAK,iBAAL;AACE;AACA;AACA,aAAO,KAAKP,CAAL,KAAW,KAAKC,CAAvB;;AACF,SAAK,iBAAL;AACE;AACA;AACA,UAAI,CAACD,CAAD,KAAO,CAACA,CAAZ,EAAe,OAAO,CAACC,CAAD,KAAO,CAACA,CAAf,CAHjB,CAIE;;AACA,aAAO,CAACD,CAAD,KAAO,CAAP,GAAW,IAAI,CAACA,CAAL,KAAW,IAAIC,CAA1B,GAA8B,CAACD,CAAD,KAAO,CAACC,CAA7C;;AACF,SAAK,eAAL;AACA,SAAK,kBAAL;AACE;AACA;AACA;AACA,aAAO,CAACD,CAAD,KAAO,CAACC,CAAf;;AACF,SAAK,iBAAL;AACE,aAAOR,WAAW,CAACgB,OAAZ,CAAoBD,IAApB,CAAyBR,CAAzB,MAAgCP,WAAW,CAACgB,OAAZ,CAAoBD,IAApB,CAAyBP,CAAzB,CAAvC;;AACF,SAAK,sBAAL;AACE;AACA,aAAOI,MAAM,CAAC,IAAIK,QAAJ,CAAaV,CAAb,CAAD,EAAkB,IAAIU,QAAJ,CAAaT,CAAb,CAAlB,EAAmCC,MAAnC,EAA2CC,MAA3C,CAAb;;AACF,SAAK,mBAAL;AACE,UAAIQ,UAAU,GAAGjB,aAAa,CAACM,CAAD,CAA9B;;AACA,UAAIW,UAAU,KAAKjB,aAAa,CAACO,CAAD,CAAhC,EAAqC;AACnC,eAAO,KAAP;AACD;;AACD,aAAOU,UAAU,EAAjB,EAAqB;AACnB,YAAIX,CAAC,CAACY,QAAF,CAAWD,UAAX,MAA2BV,CAAC,CAACW,QAAF,CAAWD,UAAX,CAA/B,EAAuD;AACrD,iBAAO,KAAP;AACD;AACF;;AACD,aAAO,IAAP;AAnCJ;;AAsCA,MAAIhB,YAAY,CAACK,CAAD,CAAhB,EAAqB;AACnB;AACA,WAAOK,MAAM,CAAC,IAAIK,QAAJ,CAAaV,CAAC,CAACa,MAAf,CAAD,EAAyB,IAAIH,QAAJ,CAAaT,CAAC,CAACY,MAAf,CAAzB,EAAiDX,MAAjD,EAAyDC,MAAzD,CAAb;AACD;;AAED,MAAIW,SAAS,GAAGP,SAAS,KAAK,gBAA9B;;AACA,MAAI,CAACO,SAAL,EAAgB;AACd,QAAI,OAAOd,CAAP,IAAY,QAAZ,IAAwB,OAAOC,CAAP,IAAY,QAAxC,EAAkD,OAAO,KAAP,CADpC,CAGd;AACA;;AACA,QAAIc,KAAK,GAAGf,CAAC,CAACgB,WAAd;AAAA,QAA2BC,KAAK,GAAGhB,CAAC,CAACe,WAArC;;AACA,QAAID,KAAK,KAAKE,KAAV,IAAmB,EAAErB,UAAU,CAACmB,KAAD,CAAV,IAAqBA,KAAK,YAAYA,KAAtC,IACAnB,UAAU,CAACqB,KAAD,CADV,IACqBA,KAAK,YAAYA,KADxC,CAAnB,IAEoB,iBAAiBjB,CAAjB,IAAsB,iBAAiBC,CAF/D,EAEmE;AACjE,aAAO,KAAP;AACD;AACF,GA9DmC,CA+DpC;AACA;AAEA;AACA;;;AACAC,EAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;AACAC,EAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;AACA,MAAIe,MAAM,GAAGhB,MAAM,CAACgB,MAApB;;AACA,SAAOA,MAAM,EAAb,EAAiB;AACf;AACA;AACA,QAAIhB,MAAM,CAACgB,MAAD,CAAN,KAAmBlB,CAAvB,EAA0B,OAAOG,MAAM,CAACe,MAAD,CAAN,KAAmBjB,CAA1B;AAC3B,GA3EmC,CA6EpC;;;AACAC,EAAAA,MAAM,CAACiB,IAAP,CAAYnB,CAAZ;AACAG,EAAAA,MAAM,CAACgB,IAAP,CAAYlB,CAAZ,EA/EoC,CAiFpC;;AACA,MAAIa,SAAJ,EAAe;AACb;AACAI,IAAAA,MAAM,GAAGlB,CAAC,CAACkB,MAAX;AACA,QAAIA,MAAM,KAAKjB,CAAC,CAACiB,MAAjB,EAAyB,OAAO,KAAP,CAHZ,CAIb;;AACA,WAAOA,MAAM,EAAb,EAAiB;AACf,UAAI,CAACnB,EAAE,CAACC,CAAC,CAACkB,MAAD,CAAF,EAAYjB,CAAC,CAACiB,MAAD,CAAb,EAAuBhB,MAAvB,EAA+BC,MAA/B,CAAP,EAA+C,OAAO,KAAP;AAChD;AACF,GARD,MAQO;AACL;AACA,QAAIiB,KAAK,GAAGvB,IAAI,CAACG,CAAD,CAAhB;AAAA,QAAqBqB,GAArB;;AACAH,IAAAA,MAAM,GAAGE,KAAK,CAACF,MAAf,CAHK,CAIL;;AACA,QAAIrB,IAAI,CAACI,CAAD,CAAJ,CAAQiB,MAAR,KAAmBA,MAAvB,EAA+B,OAAO,KAAP;;AAC/B,WAAOA,MAAM,EAAb,EAAiB;AACf;AACAG,MAAAA,GAAG,GAAGD,KAAK,CAACF,MAAD,CAAX;AACA,UAAI,EAAEpB,GAAG,CAACG,CAAD,EAAIoB,GAAJ,CAAH,IAAetB,EAAE,CAACC,CAAC,CAACqB,GAAD,CAAF,EAASpB,CAAC,CAACoB,GAAD,CAAV,EAAiBnB,MAAjB,EAAyBC,MAAzB,CAAnB,CAAJ,EAA0D,OAAO,KAAP;AAC3D;AACF,GArGmC,CAsGpC;;;AACAD,EAAAA,MAAM,CAACoB,GAAP;AACAnB,EAAAA,MAAM,CAACmB,GAAP;AACA,SAAO,IAAP;AACD,C,CAED;;;AACA,eAAe,SAASC,OAAT,CAAiBvB,CAAjB,EAAoBC,CAApB,EAAuB;AACpC,SAAOF,EAAE,CAACC,CAAD,EAAIC,CAAJ,CAAT;AACD","sourcesContent":["import _ from './underscore.js';\nimport { toString, SymbolProto } from './_setup.js';\nimport getByteLength from './_getByteLength.js';\nimport isTypedArray from './isTypedArray.js';\nimport isFunction from './isFunction.js';\nimport keys from './keys.js';\nimport has from './_has.js';\n\n// Internal recursive comparison function for `_.isEqual`.\nfunction eq(a, b, aStack, bStack) {\n  // Identical objects are equal. `0 === -0`, but they aren't identical.\n  // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).\n  if (a === b) return a !== 0 || 1 / a === 1 / b;\n  // `null` or `undefined` only equal to itself (strict comparison).\n  if (a == null || b == null) return false;\n  // `NaN`s are equivalent, but non-reflexive.\n  if (a !== a) return b !== b;\n  // Exhaust primitive checks\n  var type = typeof a;\n  if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\n  return deepEq(a, b, aStack, bStack);\n}\n\n// Internal recursive comparison function for `_.isEqual`.\nfunction deepEq(a, b, aStack, bStack) {\n  // Unwrap any wrapped objects.\n  if (a instanceof _) a = a._wrapped;\n  if (b instanceof _) b = b._wrapped;\n  // Compare `[[Class]]` names.\n  var className = toString.call(a);\n  if (className !== toString.call(b)) return false;\n  switch (className) {\n    // These types are compared by value.\n    case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n    case '[object String]':\n      // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n      // equivalent to `new String(\"5\")`.\n      return '' + a === '' + b;\n    case '[object Number]':\n      // `NaN`s are equivalent, but non-reflexive.\n      // Object(NaN) is equivalent to NaN.\n      if (+a !== +a) return +b !== +b;\n      // An `egal` comparison is performed for other numeric values.\n      return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n    case '[object Date]':\n    case '[object Boolean]':\n      // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n      // millisecond representations. Note that invalid dates with millisecond representations\n      // of `NaN` are not equivalent.\n      return +a === +b;\n    case '[object Symbol]':\n      return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\n    case '[object ArrayBuffer]':\n      // Coerce to `DataView` so we can fall through to the next case.\n      return deepEq(new DataView(a), new DataView(b), aStack, bStack);\n    case '[object DataView]':\n      var byteLength = getByteLength(a);\n      if (byteLength !== getByteLength(b)) {\n        return false;\n      }\n      while (byteLength--) {\n        if (a.getUint8(byteLength) !== b.getUint8(byteLength)) {\n          return false;\n        }\n      }\n      return true;\n  }\n\n  if (isTypedArray(a)) {\n    // Coerce typed arrays to `DataView`.\n    return deepEq(new DataView(a.buffer), new DataView(b.buffer), aStack, bStack);\n  }\n\n  var areArrays = className === '[object Array]';\n  if (!areArrays) {\n    if (typeof a != 'object' || typeof b != 'object') return false;\n\n    // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n    // from different frames are.\n    var aCtor = a.constructor, bCtor = b.constructor;\n    if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor &&\n                             isFunction(bCtor) && bCtor instanceof bCtor)\n                        && ('constructor' in a && 'constructor' in b)) {\n      return false;\n    }\n  }\n  // Assume equality for cyclic structures. The algorithm for detecting cyclic\n  // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n  // Initializing stack of traversed objects.\n  // It's done here since we only need them for objects and arrays comparison.\n  aStack = aStack || [];\n  bStack = bStack || [];\n  var length = aStack.length;\n  while (length--) {\n    // Linear search. Performance is inversely proportional to the number of\n    // unique nested structures.\n    if (aStack[length] === a) return bStack[length] === b;\n  }\n\n  // Add the first object to the stack of traversed objects.\n  aStack.push(a);\n  bStack.push(b);\n\n  // Recursively compare objects and arrays.\n  if (areArrays) {\n    // Compare array lengths to determine if a deep comparison is necessary.\n    length = a.length;\n    if (length !== b.length) return false;\n    // Deep compare the contents, ignoring non-numeric properties.\n    while (length--) {\n      if (!eq(a[length], b[length], aStack, bStack)) return false;\n    }\n  } else {\n    // Deep compare objects.\n    var _keys = keys(a), key;\n    length = _keys.length;\n    // Ensure that both objects contain the same number of properties before comparing deep equality.\n    if (keys(b).length !== length) return false;\n    while (length--) {\n      // Deep compare each member\n      key = _keys[length];\n      if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n    }\n  }\n  // Remove the first object from the stack of traversed objects.\n  aStack.pop();\n  bStack.pop();\n  return true;\n}\n\n// Perform a deep comparison to check if two objects are equal.\nexport default function isEqual(a, b) {\n  return eq(a, b);\n}\n"]},"metadata":{},"sourceType":"module"}